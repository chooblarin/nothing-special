{"version":3,"sources":["intersection-observer.js"],"names":["window","addEventListener","options","contents","Array","from","document","querySelectorAll","observer","IntersectionObserver","entries","obs","forEach","entry","includes","target","isIntersecting","classList","add","unobserve","rootMargin","threshold","el","observe"],"mappings":";AAAAA,OAAOC,iBAAiB,OAAQ,WACxBC,IAKAC,EAAWC,MAAMC,KAAKC,SAASC,iBAAiB,aAEhDC,EAAW,IAAIC,qBAAqB,SAACC,EAASC,GAClDD,EAAQE,QAAQ,SAAAC,GACVV,EAASW,SAASD,EAAME,SAAWF,EAAMG,iBAC3CH,EAAME,OAAOE,UAAUC,IAAI,SAC3BP,EAAIQ,UAAUN,EAAME,YAXV,CACdK,WAAY,QACZC,UAAW,CAAC,MAcdlB,EAASS,QAAQ,SAAAU,GAAMd,OAAAA,EAASe,QAAQD","file":"intersection-observer.7677be12.map","sourceRoot":"../src","sourcesContent":["window.addEventListener(\"load\", () => {\n  const options = {\n    rootMargin: \"-40px\",\n    threshold: [0.2]\n  };\n\n  const contents = Array.from(document.querySelectorAll(\".content\"));\n\n  const observer = new IntersectionObserver((entries, obs) => {\n    entries.forEach(entry => {\n      if (contents.includes(entry.target) && entry.isIntersecting) {\n        entry.target.classList.add(\"shown\");\n        obs.unobserve(entry.target);\n      }\n    });\n  }, options);\n\n  contents.forEach(el => observer.observe(el));\n});\n"]}